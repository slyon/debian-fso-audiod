/* fsoaudio.h generated by valac 0.16.0, the Vala compiler, do not modify */


#ifndef __FSOAUDIO_H__
#define __FSOAUDIO_H__

#include <glib.h>
#include <fsobasics.h>
#include <freesmartphone.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <alsa/asoundlib.h>

G_BEGIN_DECLS


#define FSO_AUDIO_TYPE_IROUTER (fso_audio_irouter_get_type ())
#define FSO_AUDIO_IROUTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_AUDIO_TYPE_IROUTER, FsoAudioIRouter))
#define FSO_AUDIO_IS_IROUTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_AUDIO_TYPE_IROUTER))
#define FSO_AUDIO_IROUTER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FSO_AUDIO_TYPE_IROUTER, FsoAudioIRouterIface))

typedef struct _FsoAudioIRouter FsoAudioIRouter;
typedef struct _FsoAudioIRouterIface FsoAudioIRouterIface;

#define FSO_AUDIO_TYPE_ABSTRACT_ROUTER (fso_audio_abstract_router_get_type ())
#define FSO_AUDIO_ABSTRACT_ROUTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_AUDIO_TYPE_ABSTRACT_ROUTER, FsoAudioAbstractRouter))
#define FSO_AUDIO_ABSTRACT_ROUTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_AUDIO_TYPE_ABSTRACT_ROUTER, FsoAudioAbstractRouterClass))
#define FSO_AUDIO_IS_ABSTRACT_ROUTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_AUDIO_TYPE_ABSTRACT_ROUTER))
#define FSO_AUDIO_IS_ABSTRACT_ROUTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_AUDIO_TYPE_ABSTRACT_ROUTER))
#define FSO_AUDIO_ABSTRACT_ROUTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_AUDIO_TYPE_ABSTRACT_ROUTER, FsoAudioAbstractRouterClass))

typedef struct _FsoAudioAbstractRouter FsoAudioAbstractRouter;
typedef struct _FsoAudioAbstractRouterClass FsoAudioAbstractRouterClass;
typedef struct _FsoAudioAbstractRouterPrivate FsoAudioAbstractRouterPrivate;

#define FSO_AUDIO_TYPE_NULL_ROUTER (fso_audio_null_router_get_type ())
#define FSO_AUDIO_NULL_ROUTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_AUDIO_TYPE_NULL_ROUTER, FsoAudioNullRouter))
#define FSO_AUDIO_NULL_ROUTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_AUDIO_TYPE_NULL_ROUTER, FsoAudioNullRouterClass))
#define FSO_AUDIO_IS_NULL_ROUTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_AUDIO_TYPE_NULL_ROUTER))
#define FSO_AUDIO_IS_NULL_ROUTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_AUDIO_TYPE_NULL_ROUTER))
#define FSO_AUDIO_NULL_ROUTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_AUDIO_TYPE_NULL_ROUTER, FsoAudioNullRouterClass))

typedef struct _FsoAudioNullRouter FsoAudioNullRouter;
typedef struct _FsoAudioNullRouterClass FsoAudioNullRouterClass;
typedef struct _FsoAudioNullRouterPrivate FsoAudioNullRouterPrivate;

#define FSO_AUDIO_TYPE_BUNCH_OF_MIXER_CONTROLS (fso_audio_bunch_of_mixer_controls_get_type ())
#define FSO_AUDIO_BUNCH_OF_MIXER_CONTROLS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_AUDIO_TYPE_BUNCH_OF_MIXER_CONTROLS, FsoAudioBunchOfMixerControls))
#define FSO_AUDIO_BUNCH_OF_MIXER_CONTROLS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_AUDIO_TYPE_BUNCH_OF_MIXER_CONTROLS, FsoAudioBunchOfMixerControlsClass))
#define FSO_AUDIO_IS_BUNCH_OF_MIXER_CONTROLS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_AUDIO_TYPE_BUNCH_OF_MIXER_CONTROLS))
#define FSO_AUDIO_IS_BUNCH_OF_MIXER_CONTROLS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_AUDIO_TYPE_BUNCH_OF_MIXER_CONTROLS))
#define FSO_AUDIO_BUNCH_OF_MIXER_CONTROLS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_AUDIO_TYPE_BUNCH_OF_MIXER_CONTROLS, FsoAudioBunchOfMixerControlsClass))

typedef struct _FsoAudioBunchOfMixerControls FsoAudioBunchOfMixerControls;
typedef struct _FsoAudioBunchOfMixerControlsClass FsoAudioBunchOfMixerControlsClass;
typedef struct _FsoAudioBunchOfMixerControlsPrivate FsoAudioBunchOfMixerControlsPrivate;

#define FSO_AUDIO_TYPE_MIXER_CONTROL (fso_audio_mixer_control_get_type ())
#define FSO_AUDIO_MIXER_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_AUDIO_TYPE_MIXER_CONTROL, FsoAudioMixerControl))
#define FSO_AUDIO_MIXER_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_AUDIO_TYPE_MIXER_CONTROL, FsoAudioMixerControlClass))
#define FSO_AUDIO_IS_MIXER_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_AUDIO_TYPE_MIXER_CONTROL))
#define FSO_AUDIO_IS_MIXER_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_AUDIO_TYPE_MIXER_CONTROL))
#define FSO_AUDIO_MIXER_CONTROL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_AUDIO_TYPE_MIXER_CONTROL, FsoAudioMixerControlClass))

typedef struct _FsoAudioMixerControl FsoAudioMixerControl;
typedef struct _FsoAudioMixerControlClass FsoAudioMixerControlClass;

#define FSO_AUDIO_TYPE_SOUND_DEVICE (fso_audio_sound_device_get_type ())
#define FSO_AUDIO_SOUND_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_AUDIO_TYPE_SOUND_DEVICE, FsoAudioSoundDevice))
#define FSO_AUDIO_SOUND_DEVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_AUDIO_TYPE_SOUND_DEVICE, FsoAudioSoundDeviceClass))
#define FSO_AUDIO_IS_SOUND_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_AUDIO_TYPE_SOUND_DEVICE))
#define FSO_AUDIO_IS_SOUND_DEVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_AUDIO_TYPE_SOUND_DEVICE))
#define FSO_AUDIO_SOUND_DEVICE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_AUDIO_TYPE_SOUND_DEVICE, FsoAudioSoundDeviceClass))

typedef struct _FsoAudioSoundDevice FsoAudioSoundDevice;
typedef struct _FsoAudioSoundDeviceClass FsoAudioSoundDeviceClass;
typedef struct _FsoAudioSoundDevicePrivate FsoAudioSoundDevicePrivate;
typedef struct _FsoAudioMixerControlPrivate FsoAudioMixerControlPrivate;

#define FSO_AUDIO_TYPE_PCM_DEVICE (fso_audio_pcm_device_get_type ())
#define FSO_AUDIO_PCM_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_AUDIO_TYPE_PCM_DEVICE, FsoAudioPcmDevice))
#define FSO_AUDIO_PCM_DEVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_AUDIO_TYPE_PCM_DEVICE, FsoAudioPcmDeviceClass))
#define FSO_AUDIO_IS_PCM_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_AUDIO_TYPE_PCM_DEVICE))
#define FSO_AUDIO_IS_PCM_DEVICE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_AUDIO_TYPE_PCM_DEVICE))
#define FSO_AUDIO_PCM_DEVICE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_AUDIO_TYPE_PCM_DEVICE, FsoAudioPcmDeviceClass))

typedef struct _FsoAudioPcmDevice FsoAudioPcmDevice;
typedef struct _FsoAudioPcmDeviceClass FsoAudioPcmDeviceClass;
typedef struct _FsoAudioPcmDevicePrivate FsoAudioPcmDevicePrivate;

#define FSO_AUDIO_TYPE_SESSION_HANDLER (fso_audio_session_handler_get_type ())
#define FSO_AUDIO_SESSION_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_AUDIO_TYPE_SESSION_HANDLER, FsoAudioSessionHandler))
#define FSO_AUDIO_SESSION_HANDLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_AUDIO_TYPE_SESSION_HANDLER, FsoAudioSessionHandlerClass))
#define FSO_AUDIO_IS_SESSION_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_AUDIO_TYPE_SESSION_HANDLER))
#define FSO_AUDIO_IS_SESSION_HANDLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_AUDIO_TYPE_SESSION_HANDLER))
#define FSO_AUDIO_SESSION_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_AUDIO_TYPE_SESSION_HANDLER, FsoAudioSessionHandlerClass))

typedef struct _FsoAudioSessionHandler FsoAudioSessionHandler;
typedef struct _FsoAudioSessionHandlerClass FsoAudioSessionHandlerClass;
typedef struct _FsoAudioSessionHandlerPrivate FsoAudioSessionHandlerPrivate;

#define FSO_AUDIO_TYPE_ABSTRACT_SESSION_POLICY (fso_audio_abstract_session_policy_get_type ())
#define FSO_AUDIO_ABSTRACT_SESSION_POLICY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_AUDIO_TYPE_ABSTRACT_SESSION_POLICY, FsoAudioAbstractSessionPolicy))
#define FSO_AUDIO_ABSTRACT_SESSION_POLICY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_AUDIO_TYPE_ABSTRACT_SESSION_POLICY, FsoAudioAbstractSessionPolicyClass))
#define FSO_AUDIO_IS_ABSTRACT_SESSION_POLICY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_AUDIO_TYPE_ABSTRACT_SESSION_POLICY))
#define FSO_AUDIO_IS_ABSTRACT_SESSION_POLICY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_AUDIO_TYPE_ABSTRACT_SESSION_POLICY))
#define FSO_AUDIO_ABSTRACT_SESSION_POLICY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_AUDIO_TYPE_ABSTRACT_SESSION_POLICY, FsoAudioAbstractSessionPolicyClass))

typedef struct _FsoAudioAbstractSessionPolicy FsoAudioAbstractSessionPolicy;
typedef struct _FsoAudioAbstractSessionPolicyClass FsoAudioAbstractSessionPolicyClass;
typedef struct _FsoAudioAbstractSessionPolicyPrivate FsoAudioAbstractSessionPolicyPrivate;

#define FSO_AUDIO_TYPE_ABSTRACT_STREAM_CONTROL (fso_audio_abstract_stream_control_get_type ())
#define FSO_AUDIO_ABSTRACT_STREAM_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_AUDIO_TYPE_ABSTRACT_STREAM_CONTROL, FsoAudioAbstractStreamControl))
#define FSO_AUDIO_ABSTRACT_STREAM_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_AUDIO_TYPE_ABSTRACT_STREAM_CONTROL, FsoAudioAbstractStreamControlClass))
#define FSO_AUDIO_IS_ABSTRACT_STREAM_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_AUDIO_TYPE_ABSTRACT_STREAM_CONTROL))
#define FSO_AUDIO_IS_ABSTRACT_STREAM_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_AUDIO_TYPE_ABSTRACT_STREAM_CONTROL))
#define FSO_AUDIO_ABSTRACT_STREAM_CONTROL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_AUDIO_TYPE_ABSTRACT_STREAM_CONTROL, FsoAudioAbstractStreamControlClass))

typedef struct _FsoAudioAbstractStreamControl FsoAudioAbstractStreamControl;
typedef struct _FsoAudioAbstractStreamControlClass FsoAudioAbstractStreamControlClass;

#define FSO_AUDIO_TYPE_NULL_SESSION_POLICY (fso_audio_null_session_policy_get_type ())
#define FSO_AUDIO_NULL_SESSION_POLICY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_AUDIO_TYPE_NULL_SESSION_POLICY, FsoAudioNullSessionPolicy))
#define FSO_AUDIO_NULL_SESSION_POLICY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_AUDIO_TYPE_NULL_SESSION_POLICY, FsoAudioNullSessionPolicyClass))
#define FSO_AUDIO_IS_NULL_SESSION_POLICY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_AUDIO_TYPE_NULL_SESSION_POLICY))
#define FSO_AUDIO_IS_NULL_SESSION_POLICY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_AUDIO_TYPE_NULL_SESSION_POLICY))
#define FSO_AUDIO_NULL_SESSION_POLICY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_AUDIO_TYPE_NULL_SESSION_POLICY, FsoAudioNullSessionPolicyClass))

typedef struct _FsoAudioNullSessionPolicy FsoAudioNullSessionPolicy;
typedef struct _FsoAudioNullSessionPolicyClass FsoAudioNullSessionPolicyClass;
typedef struct _FsoAudioNullSessionPolicyPrivate FsoAudioNullSessionPolicyPrivate;
typedef struct _FsoAudioAbstractStreamControlPrivate FsoAudioAbstractStreamControlPrivate;

#define FSO_AUDIO_TYPE_NULL_STREAM_CONTROL (fso_audio_null_stream_control_get_type ())
#define FSO_AUDIO_NULL_STREAM_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FSO_AUDIO_TYPE_NULL_STREAM_CONTROL, FsoAudioNullStreamControl))
#define FSO_AUDIO_NULL_STREAM_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FSO_AUDIO_TYPE_NULL_STREAM_CONTROL, FsoAudioNullStreamControlClass))
#define FSO_AUDIO_IS_NULL_STREAM_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FSO_AUDIO_TYPE_NULL_STREAM_CONTROL))
#define FSO_AUDIO_IS_NULL_STREAM_CONTROL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FSO_AUDIO_TYPE_NULL_STREAM_CONTROL))
#define FSO_AUDIO_NULL_STREAM_CONTROL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FSO_AUDIO_TYPE_NULL_STREAM_CONTROL, FsoAudioNullStreamControlClass))

typedef struct _FsoAudioNullStreamControl FsoAudioNullStreamControl;
typedef struct _FsoAudioNullStreamControlClass FsoAudioNullStreamControlClass;
typedef struct _FsoAudioNullStreamControlPrivate FsoAudioNullStreamControlPrivate;

struct _FsoAudioIRouterIface {
	GTypeInterface parent_iface;
	void (*set_mode) (FsoAudioIRouter* self, FreeSmartphoneAudioMode mode, gboolean force);
	void (*set_device) (FsoAudioIRouter* self, FreeSmartphoneAudioDevice device, gboolean expose);
	void (*set_volume) (FsoAudioIRouter* self, FreeSmartphoneAudioControl control, guint volume);
	FreeSmartphoneAudioDevice* (*get_available_devices) (FsoAudioIRouter* self, FreeSmartphoneAudioMode mode, int* result_length1);
};

struct _FsoAudioAbstractRouter {
	FsoFrameworkAbstractObject parent_instance;
	FsoAudioAbstractRouterPrivate * priv;
	FreeSmartphoneAudioMode current_mode;
	FreeSmartphoneAudioDevice current_device;
	FreeSmartphoneAudioDevice* call_supported_devices;
	gint call_supported_devices_length1;
	FreeSmartphoneAudioDevice* normal_supported_devices;
	gint normal_supported_devices_length1;
};

struct _FsoAudioAbstractRouterClass {
	FsoFrameworkAbstractObjectClass parent_class;
	void (*set_mode) (FsoAudioAbstractRouter* self, FreeSmartphoneAudioMode mode, gboolean force);
	void (*set_device) (FsoAudioAbstractRouter* self, FreeSmartphoneAudioDevice device, gboolean expose);
	void (*set_volume) (FsoAudioAbstractRouter* self, FreeSmartphoneAudioControl control, guint volume);
	FreeSmartphoneAudioDevice* (*get_available_devices) (FsoAudioAbstractRouter* self, FreeSmartphoneAudioMode mode, int* result_length1);
};

struct _FsoAudioNullRouter {
	FsoAudioAbstractRouter parent_instance;
	FsoAudioNullRouterPrivate * priv;
};

struct _FsoAudioNullRouterClass {
	FsoAudioAbstractRouterClass parent_class;
};

typedef enum  {
	FSO_AUDIO_SOUND_ERROR_NO_DEVICE,
	FSO_AUDIO_SOUND_ERROR_DEVICE_ERROR,
	FSO_AUDIO_SOUND_ERROR_NOT_ENOUGH_CONTROLS,
	FSO_AUDIO_SOUND_ERROR_INVALID_DESCRIPTOR
} FsoAudioSoundError;
#define FSO_AUDIO_SOUND_ERROR fso_audio_sound_error_quark ()
struct _FsoAudioBunchOfMixerControls {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FsoAudioBunchOfMixerControlsPrivate * priv;
	FsoAudioMixerControl** controls;
	gint controls_length1;
	guint idxSpeakerVolume;
	guint idxMicVolume;
};

struct _FsoAudioBunchOfMixerControlsClass {
	GTypeClass parent_class;
	void (*finalize) (FsoAudioBunchOfMixerControls *self);
};

struct _FsoAudioSoundDevice {
	FsoFrameworkAbstractObject parent_instance;
	FsoAudioSoundDevicePrivate * priv;
	gchar* name;
	gchar* fullname;
	gchar* mixername;
	gchar* cardname;
};

struct _FsoAudioSoundDeviceClass {
	FsoFrameworkAbstractObjectClass parent_class;
};

struct _FsoAudioMixerControl {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FsoAudioMixerControlPrivate * priv;
	snd_ctl_elem_id_t* eid;
	snd_ctl_elem_info_t* info;
	snd_ctl_elem_value_t* value;
};

struct _FsoAudioMixerControlClass {
	GTypeClass parent_class;
	void (*finalize) (FsoAudioMixerControl *self);
};

struct _FsoAudioPcmDevice {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FsoAudioPcmDevicePrivate * priv;
	snd_pcm_t* device;
};

struct _FsoAudioPcmDeviceClass {
	GTypeClass parent_class;
	void (*finalize) (FsoAudioPcmDevice *self);
};

struct _FsoAudioSessionHandler {
	FsoFrameworkAbstractObject parent_instance;
	FsoAudioSessionHandlerPrivate * priv;
};

struct _FsoAudioSessionHandlerClass {
	FsoFrameworkAbstractObjectClass parent_class;
};

struct _FsoAudioAbstractSessionPolicy {
	FsoFrameworkAbstractObject parent_instance;
	FsoAudioAbstractSessionPolicyPrivate * priv;
	FsoAudioAbstractStreamControl* stream_control;
};

struct _FsoAudioAbstractSessionPolicyClass {
	FsoFrameworkAbstractObjectClass parent_class;
	void (*handleConnectingStream) (FsoAudioAbstractSessionPolicy* self, FreeSmartphoneAudioStream stream);
	void (*handleDisconnectingStream) (FsoAudioAbstractSessionPolicy* self, FreeSmartphoneAudioStream stream);
};

struct _FsoAudioNullSessionPolicy {
	FsoAudioAbstractSessionPolicy parent_instance;
	FsoAudioNullSessionPolicyPrivate * priv;
};

struct _FsoAudioNullSessionPolicyClass {
	FsoAudioAbstractSessionPolicyClass parent_class;
};

struct _FsoAudioAbstractStreamControl {
	FsoFrameworkAbstractObject parent_instance;
	FsoAudioAbstractStreamControlPrivate * priv;
};

struct _FsoAudioAbstractStreamControlClass {
	FsoFrameworkAbstractObjectClass parent_class;
	void (*setup) (FsoAudioAbstractStreamControl* self);
	void (*set_mute) (FsoAudioAbstractStreamControl* self, FreeSmartphoneAudioStream stream, gboolean mute);
	void (*set_volume) (FsoAudioAbstractStreamControl* self, FreeSmartphoneAudioStream stream, guint level);
	gboolean (*get_mute) (FsoAudioAbstractStreamControl* self, FreeSmartphoneAudioStream stream);
	guint (*get_volume) (FsoAudioAbstractStreamControl* self, FreeSmartphoneAudioStream stream);
};

struct _FsoAudioNullStreamControl {
	FsoAudioAbstractStreamControl parent_instance;
	FsoAudioNullStreamControlPrivate * priv;
};

struct _FsoAudioNullStreamControlClass {
	FsoAudioAbstractStreamControlClass parent_class;
};


GType fso_audio_irouter_get_type (void) G_GNUC_CONST;
void fso_audio_irouter_set_mode (FsoAudioIRouter* self, FreeSmartphoneAudioMode mode, gboolean force);
void fso_audio_irouter_set_device (FsoAudioIRouter* self, FreeSmartphoneAudioDevice device, gboolean expose);
void fso_audio_irouter_set_volume (FsoAudioIRouter* self, FreeSmartphoneAudioControl control, guint volume);
FreeSmartphoneAudioDevice* fso_audio_irouter_get_available_devices (FsoAudioIRouter* self, FreeSmartphoneAudioMode mode, int* result_length1);
GType fso_audio_abstract_router_get_type (void) G_GNUC_CONST;
void fso_audio_abstract_router_set_mode (FsoAudioAbstractRouter* self, FreeSmartphoneAudioMode mode, gboolean force);
void fso_audio_abstract_router_set_device (FsoAudioAbstractRouter* self, FreeSmartphoneAudioDevice device, gboolean expose);
void fso_audio_abstract_router_set_volume (FsoAudioAbstractRouter* self, FreeSmartphoneAudioControl control, guint volume);
FreeSmartphoneAudioDevice* fso_audio_abstract_router_get_available_devices (FsoAudioAbstractRouter* self, FreeSmartphoneAudioMode mode, int* result_length1);
FsoAudioAbstractRouter* fso_audio_abstract_router_construct (GType object_type);
GType fso_audio_null_router_get_type (void) G_GNUC_CONST;
FsoAudioNullRouter* fso_audio_null_router_new (void);
FsoAudioNullRouter* fso_audio_null_router_construct (GType object_type);
GQuark fso_audio_sound_error_quark (void);
gpointer fso_audio_bunch_of_mixer_controls_ref (gpointer instance);
void fso_audio_bunch_of_mixer_controls_unref (gpointer instance);
GParamSpec* fso_audio_param_spec_bunch_of_mixer_controls (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void fso_audio_value_set_bunch_of_mixer_controls (GValue* value, gpointer v_object);
void fso_audio_value_take_bunch_of_mixer_controls (GValue* value, gpointer v_object);
gpointer fso_audio_value_get_bunch_of_mixer_controls (const GValue* value);
GType fso_audio_bunch_of_mixer_controls_get_type (void) G_GNUC_CONST;
gpointer fso_audio_mixer_control_ref (gpointer instance);
void fso_audio_mixer_control_unref (gpointer instance);
GParamSpec* fso_audio_param_spec_mixer_control (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void fso_audio_value_set_mixer_control (GValue* value, gpointer v_object);
void fso_audio_value_take_mixer_control (GValue* value, gpointer v_object);
gpointer fso_audio_value_get_mixer_control (const GValue* value);
GType fso_audio_mixer_control_get_type (void) G_GNUC_CONST;
FsoAudioBunchOfMixerControls* fso_audio_bunch_of_mixer_controls_new (FsoAudioMixerControl** controls, int controls_length1, guint idxSpeakerVolume, guint idxMicVolume);
FsoAudioBunchOfMixerControls* fso_audio_bunch_of_mixer_controls_construct (GType object_type, FsoAudioMixerControl** controls, int controls_length1, guint idxSpeakerVolume, guint idxMicVolume);
gchar* fso_audio_bunch_of_mixer_controls_to_string (FsoAudioBunchOfMixerControls* self);
GType fso_audio_sound_device_get_type (void) G_GNUC_CONST;
FsoAudioSoundDevice* fso_audio_sound_device_create (const gchar* cardname, GError** error);
FsoAudioMixerControl* fso_audio_sound_device_controlForId (FsoAudioSoundDevice* self, guint idx, GError** error);
void fso_audio_sound_device_setControl (FsoAudioSoundDevice* self, FsoAudioMixerControl* control, GError** error);
FsoAudioMixerControl** fso_audio_sound_device_allMixerControls (FsoAudioSoundDevice* self, int* result_length1, GError** error);
void fso_audio_sound_device_setAllMixerControls (FsoAudioSoundDevice* self, FsoAudioMixerControl** controls, int controls_length1, GError** error);
FsoAudioMixerControl* fso_audio_sound_device_controlForString (FsoAudioSoundDevice* self, const gchar* description, GError** error);
guint8 fso_audio_sound_device_volumeForIndex (FsoAudioSoundDevice* self, guint id);
void fso_audio_sound_device_setVolumeForIndex (FsoAudioSoundDevice* self, guint id, guint8 val);
FsoAudioMixerControl* fso_audio_mixer_control_new (snd_ctl_elem_id_t** eid, snd_ctl_elem_info_t** info, snd_ctl_elem_value_t** value);
FsoAudioMixerControl* fso_audio_mixer_control_construct (GType object_type, snd_ctl_elem_id_t** eid, snd_ctl_elem_info_t** info, snd_ctl_elem_value_t** value);
gchar* fso_audio_mixer_control_to_string (FsoAudioMixerControl* self);
guint fso_audio_mixer_control_get_volume (FsoAudioMixerControl* self);
void fso_audio_mixer_control_set_volume (FsoAudioMixerControl* self, guint value);
gpointer fso_audio_pcm_device_ref (gpointer instance);
void fso_audio_pcm_device_unref (gpointer instance);
GParamSpec* fso_audio_param_spec_pcm_device (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void fso_audio_value_set_pcm_device (GValue* value, gpointer v_object);
void fso_audio_value_take_pcm_device (GValue* value, gpointer v_object);
gpointer fso_audio_value_get_pcm_device (const GValue* value);
GType fso_audio_pcm_device_get_type (void) G_GNUC_CONST;
void fso_audio_pcm_device_open (FsoAudioPcmDevice* self, const gchar* devicename, snd_pcm_stream_t mode, GError** error);
void fso_audio_pcm_device_setFormat (FsoAudioPcmDevice* self, snd_pcm_access_t access, snd_pcm_format_t format, gint desiredrate, guint channels, GError** error);
void fso_audio_pcm_device_close (FsoAudioPcmDevice* self);
void fso_audio_pcm_device_prepare (FsoAudioPcmDevice* self, GError** error);
snd_pcm_sframes_t fso_audio_pcm_device_writei (FsoAudioPcmDevice* self, guint8* buf, int buf_length1, snd_pcm_uframes_t size, GError** error);
snd_pcm_sframes_t fso_audio_pcm_device_writen (FsoAudioPcmDevice* self, guint8** buf, int buf_length1, snd_pcm_uframes_t size, GError** error);
snd_pcm_sframes_t fso_audio_pcm_device_readi (FsoAudioPcmDevice* self, guint8* buf, int buf_length1, snd_pcm_uframes_t size, GError** error);
snd_pcm_sframes_t fso_audio_pcm_device_readn (FsoAudioPcmDevice* self, guint8** buf, int buf_length1, snd_pcm_uframes_t size, GError** error);
gint fso_audio_pcm_device_recover (FsoAudioPcmDevice* self, gint _error_, gint silent);
FsoAudioPcmDevice* fso_audio_pcm_device_new (void);
FsoAudioPcmDevice* fso_audio_pcm_device_construct (GType object_type);
GType fso_audio_session_handler_get_type (void) G_GNUC_CONST;
GType fso_audio_abstract_session_policy_get_type (void) G_GNUC_CONST;
FsoAudioSessionHandler* fso_audio_session_handler_new (FsoAudioAbstractSessionPolicy* policy);
FsoAudioSessionHandler* fso_audio_session_handler_construct (GType object_type, FsoAudioAbstractSessionPolicy* policy);
FreeSmartphoneAudioStream fso_audio_session_handler_streamTypeForToken (FsoAudioSessionHandler* self, const gchar* token);
gchar* fso_audio_session_handler_register_session (FsoAudioSessionHandler* self, FreeSmartphoneAudioStream stream, GError** error);
void fso_audio_session_handler_release_session (FsoAudioSessionHandler* self, const gchar* token, GError** error);
GType fso_audio_abstract_stream_control_get_type (void) G_GNUC_CONST;
void fso_audio_abstract_session_policy_handleConnectingStream (FsoAudioAbstractSessionPolicy* self, FreeSmartphoneAudioStream stream);
void fso_audio_abstract_session_policy_handleDisconnectingStream (FsoAudioAbstractSessionPolicy* self, FreeSmartphoneAudioStream stream);
void fso_audio_abstract_session_policy_provideStreamControl (FsoAudioAbstractSessionPolicy* self, FsoAudioAbstractStreamControl* stream_control);
FsoAudioAbstractSessionPolicy* fso_audio_abstract_session_policy_construct (GType object_type);
GType fso_audio_null_session_policy_get_type (void) G_GNUC_CONST;
FsoAudioNullSessionPolicy* fso_audio_null_session_policy_new (void);
FsoAudioNullSessionPolicy* fso_audio_null_session_policy_construct (GType object_type);
void fso_audio_abstract_stream_control_setup (FsoAudioAbstractStreamControl* self);
void fso_audio_abstract_stream_control_set_mute (FsoAudioAbstractStreamControl* self, FreeSmartphoneAudioStream stream, gboolean mute);
void fso_audio_abstract_stream_control_set_volume (FsoAudioAbstractStreamControl* self, FreeSmartphoneAudioStream stream, guint level);
gboolean fso_audio_abstract_stream_control_get_mute (FsoAudioAbstractStreamControl* self, FreeSmartphoneAudioStream stream);
guint fso_audio_abstract_stream_control_get_volume (FsoAudioAbstractStreamControl* self, FreeSmartphoneAudioStream stream);
FsoAudioAbstractStreamControl* fso_audio_abstract_stream_control_construct (GType object_type);
GType fso_audio_null_stream_control_get_type (void) G_GNUC_CONST;
FsoAudioNullStreamControl* fso_audio_null_stream_control_new (void);
FsoAudioNullStreamControl* fso_audio_null_stream_control_construct (GType object_type);


G_END_DECLS

#endif
